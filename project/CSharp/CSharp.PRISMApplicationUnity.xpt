<?xml version="1.0"?>
<Template originator="Michael Seeger" created="01/11/2012">

	<!-- Template Header -->
	<TemplateConfiguration>
		<Name>${res:Templates.Project.PRISMApplicationUnity.Name}</Name>
		<Category>C#</Category>
		<Subcategory>PRISM</Subcategory>
		<Icon>C#.Project.PRISMApplication</Icon>
		<Description>${res:Templates.Project.PRISMApplicationUnity.Description}</Description>
		<SupportedTargetFrameworks>v4.0;v4.0Client</SupportedTargetFrameworks>
	</TemplateConfiguration>


	<!-- Actions -->
	<Actions>
		<Open filename="${ProjectName}\Bootstrapper.cs" />
		<RunCommand path="/AddIns/PackageManagement/TemplateCommands/InstallPackages"/>
	</Actions>


	<!-- The PRISM-Solution -->
	<Solution name = "${ProjectName}" directory = ".">
	
		<!-- The Startup-Project is the Shell-Project -->
		<Options>
			<StartupProject>${ProjectName}</StartupProject>
		</Options>


		<!-- Base SolutionFolder containing Base-Projects -->
		<SolutionFolder name = "1 - Base" directory="Base">

			<!-- Base-Project -->
			<Project name="${ProjectName}.Base" directory="Base\${ProjectName}.Base" language="C#">

				<PropertyGroup>
					<OutputType>Library</OutputType>
					<AppDesignerFolder>Properties</AppDesignerFolder>
				</PropertyGroup>
				
				<PropertyGroup configuration="Debug">
					<OutputPath>..\..\Application\Debug\</OutputPath>
				</PropertyGroup>

				<PropertyGroup configuration="Release">
					<OutputPath>..\..\Application\Release\</OutputPath>
				</PropertyGroup>

				<ProjectItems>
					<Reference Include="Microsoft.Expression.Interactions" />
					<Reference Include="Microsoft.Practices.Prism" />
					<Reference Include="Microsoft.Practices.Prism.Interactivity" />
					<Reference Include="Microsoft.Practices.ServiceLocation" />
					<Reference Include="NLog" />
					<Reference Include="System" />
					<Reference Include="System.Core" />
					<Reference Include="System.Windows.Interactivity" />
					<Reference Include="System.Xml" />
					<Reference Include="System.Xml.Linq" />
				</ProjectItems>

				<Files>
					<File name="Interfaces\${ProjectName}.Interfaces.txt"><![CDATA[// Project ${ProjectName} created on ${Date} at ${Time}]]></File>
					<File name="Exceptions\${ProjectName}.Exceptions.txt"><![CDATA[// Project ${ProjectName} created on ${Date} at ${Time}]]></File>
					<File name="Properties\AssemblyInfo.cs" src="DefaultAssemblyInfo.cs"/>
					<File name="packages.config">
<![CDATA[<?xml version="1.0" encoding="utf-8"?>
<packages>
	<package id="CommonServiceLocator" version="1.0" targetFramework="net40" />
	<package id="NLog" version="2.0.0.2000" targetFramework="net40" />
	<package id="Prism" version="4.1.0.0" targetFramework="net40" />
</packages>]]>
					</File>
					<File name="Names\RegionNames.cs">
<![CDATA[using System;

namespace ${StandardNamespace}.Names
{
	/// <summary>
	/// Contains all Region names ever used.
	/// </summary>
	public class RegionNames
	{
		// Shell Regions
		public const string MainRegion = "MainRegion";
		public const string MenuRegion = "MenuRegion";
		public const string NavigationRegion = "NavigationRegion";
		public const string StatusbarRegion = "StatusbarRegion";
	}
}
]]>
					</File>
					<File name="nlog.config" CopyToOutputDirectory="Always">
<![CDATA[<nlog xmlns="http://www.nlog-project.org/schemas/NLog.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">

	<targets>
		<target name="FileLogger" xsi:type="File" fileName="${SolutionName}.log" layout="${log4jxmlevent}"/>
	</targets>

	<rules>
		<logger name="*" minlevel="Info" writeTo="FileLogger" />
	</rules>

</nlog>]]>
					</File>
					<File name="NLogLogger.cs">
<![CDATA[using System;
using Microsoft.Practices.Prism;
using Microsoft.Practices.Prism.Logging;
using NLog;

namespace ${StandardNamespace}
{

	/// <summary>
	/// NLog-Logger implementing ILoggerFacade.
	/// </summary>
	public class NLogLogger : ILoggerFacade
	{

		private static NLog.Logger _logger = LogManager.GetLogger("{$ProjectName}");

		public void Log(string message, Category category, Priority priority)
		{
			LogLevel nLevel = null;

			switch (category)
			{
				case Category.Debug:
					nLevel = LogLevel.Debug;
					break;

				case Category.Exception:
					nLevel = LogLevel.Error;
					break;

				case Category.Info:
					nLevel = LogLevel.Info;
					break;

				case Category.Warn:
					nLevel = LogLevel.Warn;
					break;
			}

			_logger.Log(nLevel, message);

		}

	}

}]]>
					</File>
				</Files>
			</Project>

			<!-- Base.Interface-Project (global Interface-Assembly) -->
			<Project name="${ProjectName}.Interface" directory="Base\${ProjectName}.Interface" language="C#">

				<PropertyGroup>
					<OutputType>Library</OutputType>
					<AppDesignerFolder>Properties</AppDesignerFolder>
				</PropertyGroup>
				
				<PropertyGroup configuration="Debug">
					<OutputPath>..\..\Application\Debug\</OutputPath>
				</PropertyGroup>

				<PropertyGroup configuration="Release">
					<OutputPath>..\..\Application\Release\</OutputPath>
				</PropertyGroup>

				<ProjectItems>
					<Reference Include="System" />
					<Reference Include="System.Core" />
					<Reference Include="System.Xml" />
					<Reference Include="System.Xml.Linq" />
				</ProjectItems>

				<Files>
					<File name="Business\${ProjectName}.Business.txt"><![CDATA[// Project ${ProjectName} created on ${Date} at ${Time}]]></File>
					<File name="Data\${ProjectName}.Data.txt"><![CDATA[// Project ${ProjectName} created on ${Date} at ${Time}]]></File>
					<File name="Service\${ProjectName}.Service.txt"><![CDATA[// Project ${ProjectName} created on ${Date} at ${Time}]]></File>
					<File name="Properties\AssemblyInfo.cs" src="DefaultAssemblyInfo.cs"/>
				</Files>
			</Project>

			<!-- Base.Model-Project (global Model-Assembly) -->
			<Project name="${ProjectName}.Model" directory="Base\${ProjectName}.Model" language="C#">

				<PropertyGroup>
					<OutputType>Library</OutputType>
					<AppDesignerFolder>Properties</AppDesignerFolder>
				</PropertyGroup>

				<PropertyGroup configuration="Debug">
					<OutputPath>..\..\Application\Debug\</OutputPath>
				</PropertyGroup>

				<PropertyGroup configuration="Release">
					<OutputPath>..\..\Application\Release\</OutputPath>
				</PropertyGroup>

				<ProjectItems>
					<Reference Include="System" />
					<Reference Include="System.Core" />
					<Reference Include="System.Xml" />
					<Reference Include="System.Xml.Linq" />
				</ProjectItems>

				<Files>
					<File name="Interface\${ProjectName}.Interface.txt"><![CDATA[// Project ${ProjectName} created on ${Date} at ${Time}]]></File>
					<File name="Properties\AssemblyInfo.cs" src="DefaultAssemblyInfo.cs"/>
				</Files>
			</Project>


			<!-- Base.Resource-Project (global Resource-Assembly) -->
			<Project name="${ProjectName}.Resource" directory="Base\${ProjectName}.Resource" language="C#">

				<PropertyGroup>
					<OutputType>Library</OutputType>
					<AppDesignerFolder>Properties</AppDesignerFolder>
				</PropertyGroup>
				
				<PropertyGroup configuration="Debug">
					<OutputPath>..\..\Application\Debug\</OutputPath>
				</PropertyGroup>

				<PropertyGroup configuration="Release">
					<OutputPath>..\..\Application\Release\</OutputPath>
				</PropertyGroup>

				<ProjectItems>
					<Reference Include="PresentationCore" />
					<Reference Include="PresentationFramework" />
					<Reference Include="System" />
					<Reference Include="System.Core" />
					<Reference Include="System.Xml" />
					<Reference Include="System.Xml.Linq" />
					<Reference Include="WindowsBase" />
				</ProjectItems>

				<Files>
					<File name="Images\16x16\door-open-out.png" src="PRISM.Resources\door-open-out.png" buildAction="Resource"></File>
					<File name="Images\Icons16x16.xaml">
<![CDATA[<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
	xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">

	<BitmapImage x:Key="icoDoorOpenOut16" UriSource="16x16/door-open-out.png"/> 

	<Grid x:Key="icoDoorOpenOutMetro">
		<Grid Width="16" Height="16" Visibility="Collapsed" />
		<Path Data="M34.201,35.752792L36.154999,37.072937 36.154999,61.028999 26.27,61.028999 26.27,58.465 34.201,58.465z M18.94405,30.222998C17.962244,30.222998 17.167,31.018967 17.167,32.00045 17.167,32.982033 17.962244,33.778 18.94405,33.778 19.925556,33.778 20.721001,32.982033 20.721001,32.00045 20.721001,31.018967 19.925556,30.222998 18.94405,30.222998z M44.257435,25.653L44.257435,29.183289 51.842999,29.183289 51.842999,35.705292 44.257435,35.705292 44.257435,39.237999 34.201,32.444984z M26.27,3.8619995L36.154999,3.8619995 36.154999,27.81745 34.201,29.137484 34.201,6.2989998 26.27,6.2989998z M24.27,0L24.27,64 0,60 0,4.0000029z" Stretch="Uniform" Fill="#FFFF0000" Width="16" Height="16" Margin="0,0,0,0" RenderTransformOrigin="0.5,0.5">
			<Path.RenderTransform>
				<TransformGroup>
					<TransformGroup.Children>
						<RotateTransform Angle="0" />
						<ScaleTransform ScaleX="1" ScaleY="1" />
					</TransformGroup.Children>
				</TransformGroup>
			</Path.RenderTransform>
		</Path>
	</Grid>

</ResourceDictionary>]]>
					</File>
					<File name="Properties\AssemblyInfo.cs" src="DefaultAssemblyInfo.cs"/>
				</Files>
			</Project>


			<!-- Base.Service-Project (global Model-Assembly) -->
			<Project name="${ProjectName}.Service" directory="Base\${ProjectName}.Service" language="C#">

				<PropertyGroup>
					<OutputType>Library</OutputType>
					<AppDesignerFolder>Properties</AppDesignerFolder>
				</PropertyGroup>

				<PropertyGroup configuration="Debug">
					<OutputPath>..\..\Application\Debug\</OutputPath>
				</PropertyGroup>

				<PropertyGroup configuration="Release">
					<OutputPath>..\..\Application\Release\</OutputPath>
				</PropertyGroup>

				<ProjectItems>
					<Reference Include="System" />
					<Reference Include="System.Core" />
					<Reference Include="System.Xml" />
					<Reference Include="System.Xml.Linq" />
				f</ProjectItems>

				<Files>
					<File name="Exception\${ProjectName}.Exception.txt"><![CDATA[// Project ${ProjectName} created on ${Date} at ${Time}]]></File>
					<File name="Interface\${ProjectName}.Interface.txt"><![CDATA[// Project ${ProjectName} created on ${Date} at ${Time}]]></File>
					<File name="Properties\AssemblyInfo.cs" src="DefaultAssemblyInfo.cs"/>
				</Files>
			</Project>

		</SolutionFolder>


		<!-- Data SolutionFolder containing Data-Projects -->
		<SolutionFolder name = "2 - Data" directory="Data">

			<!-- Data-Project (global Data-Assembly) -->
			<Project name="${ProjectName}.Data" directory="Data\${ProjectName}.Data" language="C#">

				<PropertyGroup>
					<OutputType>Library</OutputType>
					<AppDesignerFolder>Properties</AppDesignerFolder>
				</PropertyGroup>

				<PropertyGroup configuration="Debug">
					<OutputPath>..\..\Application\Debug\</OutputPath>
				</PropertyGroup>

				<PropertyGroup configuration="Release">
					<OutputPath>..\..\Application\Release\</OutputPath>
				</PropertyGroup>

				<ProjectItems>
					<Reference Include="System" />
					<Reference Include="System.Core" />
					<Reference Include="System.Xml" />
					<Reference Include="System.Xml.Linq" />
				</ProjectItems>

				<Files>
					<File name="Exception\${ProjectName}.Exception.txt"><![CDATA[// Project ${ProjectName} created on ${Date} at ${Time}]]></File>
					<File name="Interface\${ProjectName}.Interface.txt"><![CDATA[// Project ${ProjectName} created on ${Date} at ${Time}]]></File>
					<File name="Properties\AssemblyInfo.cs" src="DefaultAssemblyInfo.cs"/>
				</Files>
			</Project>

			<!-- Data.Model-Project (global Datamodel-Assembly) -->
			<Project name="${ProjectName}.Data.Model" directory="Data\${ProjectName}.Data.Model" language="C#">

				<PropertyGroup>
					<OutputType>Library</OutputType>
					<AppDesignerFolder>Properties</AppDesignerFolder>
				</PropertyGroup>

				<PropertyGroup configuration="Debug">
					<OutputPath>..\..\Application\Debug\</OutputPath>
				</PropertyGroup>

				<PropertyGroup configuration="Release">
					<OutputPath>..\..\Application\Release\</OutputPath>
				</PropertyGroup>

				<ProjectItems>
					<Reference Include="System" />
					<Reference Include="System.Core" />
					<Reference Include="System.Xml" />
					<Reference Include="System.Xml.Linq" />
				</ProjectItems>

				<Files>
					<File name="Interface\${ProjectName}.Interface.txt"><![CDATA[// Project ${ProjectName} created on ${Date} at ${Time}]]></File>
					<File name="Properties\AssemblyInfo.cs" src="DefaultAssemblyInfo.cs"/>
				</Files>
			</Project>

			<!-- Data.Service-Project (global Dataservice-Assembly) -->
			<Project name="${ProjectName}.Data.Service" directory="Data\${ProjectName}.Data.Service" language="C#">

				<PropertyGroup>
					<OutputType>Library</OutputType>
					<AppDesignerFolder>Properties</AppDesignerFolder>
				</PropertyGroup>

				<ProjectItems>
					<Reference Include="System" />
					<Reference Include="System.Core" />
					<Reference Include="System.Xml" />
					<Reference Include="System.Xml.Linq" />
				</ProjectItems>

				<Files>
					<File name="Exception\${ProjectName}.Exception.txt"><![CDATA[// Project ${ProjectName} created on ${Date} at ${Time}]]></File>
					<File name="Interface\${ProjectName}.Interface.txt"><![CDATA[// Project ${ProjectName} created on ${Date} at ${Time}]]></File>
					<File name="Properties\AssemblyInfo.cs" src="DefaultAssemblyInfo.cs"/>
				</Files>
			</Project>

			<!-- Data.Service-Project (global Dataservice-Assembly) -->
			<Project name="${ProjectName}.Data.Service.Xml" directory="Data\${ProjectName}.Data.Service.Xml" language="C#">

				<PropertyGroup>
					<OutputType>Library</OutputType>
					<AppDesignerFolder>Properties</AppDesignerFolder>
				</PropertyGroup>

				<PropertyGroup configuration="Debug">
					<OutputPath>..\..\Application\Debug\</OutputPath>
				</PropertyGroup>

				<PropertyGroup configuration="Release">
					<OutputPath>..\..\Application\Release\</OutputPath>
				</PropertyGroup>

				<ProjectItems>
					<Reference Include="System" />
					<Reference Include="System.Core" />
					<Reference Include="System.Xml" />
					<Reference Include="System.Xml.Linq" />
				</ProjectItems>

				<Files>
					<File name="Exception\${ProjectName}.Exception.txt"><![CDATA[// Project ${ProjectName} created on ${Date} at ${Time}]]></File>
					<File name="Interface\${ProjectName}.Interface.txt"><![CDATA[// Project ${ProjectName} created on ${Date} at ${Time}]]></File>
					<File name="Properties\AssemblyInfo.cs" src="DefaultAssemblyInfo.cs"/>
				</Files>
			</Project>

		</SolutionFolder>


		<!-- Business SolutionFolder containing Business-Projects -->
		<SolutionFolder name = "3 - Business" directory="Business">

			<!-- Business-Project (global Business-Assembly) -->
			<Project name="${ProjectName}.Business" directory="Business\${ProjectName}.Business" language="C#">

				<PropertyGroup>
					<OutputType>Library</OutputType>
					<AppDesignerFolder>Properties</AppDesignerFolder>
				</PropertyGroup>

				<PropertyGroup configuration="Debug">
					<OutputPath>..\..\Application\Debug\</OutputPath>
				</PropertyGroup>

				<PropertyGroup configuration="Release">
					<OutputPath>..\..\Application\Release\</OutputPath>
				</PropertyGroup>

				<ProjectItems>
					<Reference Include="System" />
					<Reference Include="System.Core" />
					<Reference Include="System.Xml" />
					<Reference Include="System.Xml.Linq" />
				</ProjectItems>

				<Files>
					<File name="Exception\${ProjectName}.Exception.txt"><![CDATA[// Project ${ProjectName}.Business created on ${Date} at ${Time}]]></File>
					<File name="Interface\${ProjectName}.Interface.txt"><![CDATA[// Project ${ProjectName}.Business created on ${Date} at ${Time}]]></File>
					<File name="Properties\AssemblyInfo.cs" src="DefaultAssemblyInfo.cs"/>
				</Files>
			</Project>

			<!-- Business.Model-Project (global Businessmodel-Assembly) -->
			<Project name="${ProjectName}.Business.Model" directory="Business\${ProjectName}.Business.Model" language="C#">

				<PropertyGroup>
					<OutputType>Library</OutputType>
					<AppDesignerFolder>Properties</AppDesignerFolder>
				</PropertyGroup>

				<PropertyGroup configuration="Debug">
					<OutputPath>..\..\Application\Debug\</OutputPath>
				</PropertyGroup>

				<PropertyGroup configuration="Release">
					<OutputPath>..\..\Application\Release\</OutputPath>
				</PropertyGroup>

				<ProjectItems>
					<Reference Include="System" />
					<Reference Include="System.Core" />
					<Reference Include="System.Xml" />
					<Reference Include="System.Xml.Linq" />
				</ProjectItems>

				<Files>
					<File name="Interface\${ProjectName}.Interface.txt"><![CDATA[// Project ${ProjectName} created on ${Date} at ${Time}]]></File>
					<File name="Properties\AssemblyInfo.cs" src="DefaultAssemblyInfo.cs"/>
				</Files>
			</Project>

			<!-- Business.Service-Project (global Businessserviced-Assembly) -->
			<Project name="${ProjectName}.Business.Service" directory="Business\${ProjectName}.Business.Service" language="C#">

				<PropertyGroup>
					<OutputType>Library</OutputType>
					<AppDesignerFolder>Properties</AppDesignerFolder>
				</PropertyGroup>

				<PropertyGroup configuration="Debug">
					<OutputPath>..\..\Application\Debug\</OutputPath>
				</PropertyGroup>

				<PropertyGroup configuration="Release">
					<OutputPath>..\..\Application\Release\</OutputPath>
				</PropertyGroup>

				<ProjectItems>
					<Reference Include="System" />
					<Reference Include="System.Core" />
					<Reference Include="System.Xml" />
					<Reference Include="System.Xml.Linq" />
				</ProjectItems>

				<Files>
					<File name="Exception\${ProjectName}.Exception.txt"><![CDATA[// Project ${ProjectName} created on ${Date} at ${Time}]]></File>
					<File name="Interface\${ProjectName}.Interface.txt"><![CDATA[// Project ${ProjectName} created on ${Date} at ${Time}]]></File>
					<File name="Properties\AssemblyInfo.cs" src="DefaultAssemblyInfo.cs"/>
				</Files>

			</Project>

		</SolutionFolder>


		<!-- Modules SolutionFolder containing Data-Projects -->
		<SolutionFolder name = "4 - Modules" directory="Modules">

			<Project name="${ProjectName}.Modules.Main" directory="Modules\${ProjectName}.Modules.Main" language="C#">

				<ProjectItems>
					<Reference Include="MashedVVM" />
					<Reference Include="Microsoft.Practices.Prism" />
					<Reference Include="Microsoft.Practices.Prism.UnityExtensions" />
					<Reference Include="Microsoft.Practices.Unity" />
					<Reference Include="PresentationCore" />
					<Reference Include="PresentationFramework" />
					<Reference Include="System" />
					<Reference Include="System.Data" />
					<Reference Include="System.Xaml" />
					<Reference Include="System.Xml" />
					<Reference Include="System.Xml.Linq" />
					<Reference Include="WindowsBase" />
				</ProjectItems>

				<ProjectItems>
					<ProjectReference Include="..\..\Base\${SolutionName}.Base\${SolutionName}.Base.csproj" />
					<ProjectReference Include="..\..\Base\${SolutionName}.Resource\${SolutionName}.Resource.csproj" />
				</ProjectItems>

		<PropertyGroup>
			<OutputType>Library</OutputType>
			<!-- ProjectTypeGuids>{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC};{60DC8134-EBA5-43B8-BCC9-BB4BC16C2548}</ProjectTypeGuids -->
			<AppDesignerFolder>Properties</AppDesignerFolder>
		</PropertyGroup>
		
		<PropertyGroup configuration="Debug">
			<OutputPath>..\..\Application\Debug\Modules</OutputPath>
		</PropertyGroup>

		<PropertyGroup configuration="Release">
			<OutputPath>..\..\Application\Release\Modules</OutputPath>
		</PropertyGroup>
		
		<Files>
			<File name="Views\FileMenuView.xaml" buildAction="Page" language="XML">
<![CDATA[<mv:UserControlViewBase x:Class="${ProjectName}.Views.FileMenuView"
	xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
	xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	xmlns:mv="clr-namespace:MashedVVM.Framework.View;assembly=MashedVVM">

	<mv:UserControlViewBase.Resources>
		<ResourceDictionary>
			<ResourceDictionary.MergedDictionaries>
				<ResourceDictionary Source="pack://application:,,,/${SolutionName}.Resource;component/Images/Icons16x16.xaml"/>
			</ResourceDictionary.MergedDictionaries>
		</ResourceDictionary>
	</mv:UserControlViewBase.Resources>

	<Grid>
		<Menu Background="Transparent">
			<MenuItem Header="_File">
				<MenuItem Header="_Exit" Command="{Binding Path=ExitCommand}">
					<MenuItem.Icon>
						<!-- For BitmapImage -->
						<Image Source="{StaticResource icoDoorOpenOut16}" />
						<!-- If you like "Metro"-Style as exported by MetroStudio2: -->
						<!-- Viewbox Child="{StaticResource icoDoorOpenOutMetro}" /-->
					</MenuItem.Icon>
				</MenuItem>
			</MenuItem>
		</Menu>
	</Grid>
</mv:UserControlViewBase>]]>
			</File>

			<File name="Views\FileMenuView.xaml.cs" SubType="Code" DependentUpon="Views\FileMenuView.xaml">
<![CDATA[using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;
using MashedVVM.Framework.Contracts;
using MashedVVM.Framework.View;

namespace ${ProjectName}.Views
{

	/// <summary>
	/// Interaction logic for FileMenuView.xaml
	/// </summary>
	public partial class FileMenuView : UserControlViewBase
	{

		
		public FileMenuView()
		{
			InitializeComponent();
		}

	}

}]]>
			</File>

			<File name="ViewModels\FileMenuViewModel.cs">
<![CDATA[using System;
using System.ComponentModel;
using System.Linq;
using System.Windows;
using MashedVVM.Framework;
using MashedVVM.Framework.ViewModel;
using Microsoft.Practices.Prism.Regions;
using Microsoft.Practices.Prism.ViewModel;

namespace ${ProjectName}.ViewModels
{

	/// <summary>
	/// View1ViewModel
	/// </summary>
	public class FileMenuViewModel : ViewModelBase
	{

		private RelayCommand _exitCommand;
		public RelayCommand ExitCommand
		{
			get { return _exitCommand ?? (_exitCommand = new RelayCommand(Exit)); }
		}

		private void Exit()
		{
			Application.Current.Shutdown();
		}
	}

}]]>
			</File>
			<File name="packages.config">
<![CDATA[<?xml version="1.0" encoding="utf-8"?>
<packages>
	<package id="MashedVVM" version="1.0.1.7" targetFramework="net40" />
</packages>]]>
			</File>
			<File name="ModuleInitializer.cs">
<![CDATA[using System;
using MashedVVM.Framework.Contracts;
using Microsoft.Practices.Prism.Modularity;
using Microsoft.Practices.Prism.Regions;
using Microsoft.Practices.Unity;
using ${SolutionName}.Base.Names;
using ${ProjectName}.ViewModels;
using ${ProjectName}.Views;

namespace ${ProjectName}
{

	/// <summary>
	/// (Initializing) Module class for ${ProjectName}
	/// having UnityContainer and Regionmanager injected
	/// </summary>
	
	// Module will be initialized "as available" (by default)
	// Use this attribute when the module is rarely used:
	//[Module(ModuleName="${ProjectName}", OnDemand=true)] 
	[Module(ModuleName="${ProjectName}")]
	public class ModuleInitializer : IModule
	{
		
		IUnityContainer _container;
		IRegionManager _regionManager;
		

		public ModuleInitializer(IUnityContainer container, IRegionManager regionManager)
		{
			// Get conatiner and region manager
			_container = container;
			_regionManager = regionManager;
		}
		

		public void Initialize()
		{
			// ViewModel Registration:
			_container.RegisterType(typeof(IViewModel), typeof(FileMenuViewModel), Names.FileMenuViewModel);

			// View Registration:
			_container.RegisterType(typeof(IView), typeof(FileMenuView), Names.FileMenuView);

			// View Injection:
			// FileMenuView
			var vmFm = (IViewModel)_container.Resolve(typeof(IViewModel), Names.FileMenuViewModel);
			var vFm = (IView)_container.Resolve(typeof(IView), Names.FileMenuView);
			vmFm.View = vFm;
			_regionManager.Regions[RegionNames.MenuRegion].Add(vmFm.View);
		}

	}

}]]>
			</File>
			<File name="Names.cs">
<![CDATA[using System;

namespace ${ProjectName}
{
	/// <summary>
	/// Names for Views and ViewModels.
	/// </summary>
	public static class Names
	{

		public const String FileMenuView = "FileMenuView";
		public const String FileMenuViewModel = "FileMenuViewModel";

	}

}]]>
			</File>
			<File name="Properties\WPFAssemblyInfo.cs" src="WPFAssemblyInfo.cs" />
			<File name="Properties\AssemblyInfo.cs" src="DefaultAssemblyInfo.cs" />
		</Files>
	</Project>
		
		</SolutionFolder>


		<!-- Test SolutionFolder containing Data-Projects -->
		<SolutionFolder name = "5 - Test" directory="Test">
		</SolutionFolder>


		<!-- PRISM Shell (Main-)Project resides in the base directory of the Solution -->
		<Project name="${ProjectName}" directory="${ProjectName}" language="C#" defaultPlatform="x86">

			<ProjectItems>
				<Reference Include="MashedVVM" />
				<Reference Include="Microsoft.Expression.Interactions" />
				<Reference Include="Microsoft.Practices.Prism" />
				<Reference Include="Microsoft.Practices.Prism.Interactivity" />
				<Reference Include="Microsoft.Practices.Prism.UnityExtensions" />
				<Reference Include="Microsoft.Practices.ServiceLocation" />
				<Reference Include="Microsoft.Practices.Unity" />
				<Reference Include="Microsoft.Practices.Unity.Configuration" />
				<Reference Include="mscorlib" />
				<Reference Include="PresentationCore" />
				<Reference Include="PresentationFramework" />
				<Reference Include="System" />
				<Reference Include="System.Configuration" />
				<Reference Include="System.Data" />
				<Reference Include="System.Windows.Interactivity" />
				<Reference Include="System.Xaml" />
				<Reference Include="System.Xml" />
				<Reference Include="System.Xml.Linq" />
				<Reference Include="WindowsBase" />
			</ProjectItems>
			
			<ProjectItems>
				<ProjectReference Include="..\Base\${SolutionName}.Base\${SolutionName}.Base.csproj" />
			</ProjectItems>

			<PropertyGroup>
				<OutputType>WinExe</OutputType>
				<!-- ProjectTypeGuids>{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC};{60DC8134-EBA5-43B8-BCC9-BB4BC16C2548}</ProjectTypeGuids -->
				<AppDesignerFolder>Properties</AppDesignerFolder>
			</PropertyGroup>

			<PropertyGroup configuration="Debug">
				<OutputPath>..\Application\Debug\</OutputPath>
			</PropertyGroup>

			<PropertyGroup configuration="Release">
				<OutputPath>..\Application\Release\</OutputPath>
			</PropertyGroup>

			<Files>
 				<File name="app.config">
<![CDATA[<?xml version="1.0" encoding="utf-8"?>
<configuration>

	<startup>
		<supportedRuntime version="v4.0" sku=".NETFramework,Version=v4.0" />
	</startup>

</configuration>]]>
				</File>
				<File name="packages.config">
<![CDATA[<?xml version="1.0" encoding="utf-8"?>
<packages>
	<package id="CommonServiceLocator" version="1.0" targetFramework="net40" />
	<package id="MashedVVM" version="1.0.1.5" targetFramework="net40" />
	<package id="Prism" version="4.1.0.0" targetFramework="net40" />
	<package id="Prism.UnityExtensions" version="4.1.0.0" targetFramework="net40" />
	<package id="Unity" version="2.1.505.2" targetFramework="net40" />
</packages>]]>
				</File>
				<File name="unity.config" CopyToOutputDirectory="Always">
<![CDATA[<?xml version="1.0" encoding="utf-8" ?>
<configuration>

	<configSections>
		<section name="unity"
			type="Microsoft.Practices.Unity.Configuration.UnityConfigurationSection, Microsoft.Practices.Unity.Configuration" />
	</configSections>

	<unity>

		<typeAliases>
			<typeAlias
				alias="Singleton"
				type="Microsoft.Practices.Unity.ContainerControlledLifetimeManager, Microsoft.Practices.Unity" />
			
			<!-- Sample for registering a Business Service -->
			<!--typeAlias
				alias="IBusinessService"
				type="${ProjectName}.Base.Interface.Business.IBusinessService, ${ProjectName}.Base.Interface" />
			<typeAlias 
				alias="BusinesServiceInst"
				type="${ProjectName}.Business.Service, ${ProjectName}.Business" /-->

		</typeAliases>

		<containers>
			<container>
				<types>

					<!-- Sample for registering a Business Service -->
					<!--type 
						type="IBusinessService" 
						mapto="BusinessServiceInst">
						<lifetime type="Singleton" />
					</type -->

				</types>
			</container>
		</containers>

	</unity>

</configuration>]]>
				</File>
				<File name="App.xaml" buildAction="ApplicationDefinition" language="XML">
<![CDATA[<Application x:Class="${ProjectName}.App"
	xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
	xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	ShutdownMode="OnExplicitShutdown">
	<Application.Resources>
		
	</Application.Resources>
</Application>]]>
				</File>
				<File name="App.xaml.cs" SubType="Code" DependentUpon="App.xaml">
<![CDATA[using System;
using System.Windows;
using System.Data;
using System.Xml;
using System.Configuration;
using Microsoft.Practices.Prism;
using Microsoft.Practices.Prism.UnityExtensions;

namespace ${StandardNamespace}
{

	public partial class App : Application
	{

		protected override void OnStartup(StartupEventArgs e)
		{
			base.OnStartup(e);
			Bootstrapper bootstrapper = new Bootstrapper();
			bootstrapper.Run();
		}

	}

}]]>
				</File>
				<File name="Shell.xaml" buildAction="Page" language="XML">
<![CDATA[<Window
	x:Class="${ProjectName}.Shell"
	xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
	xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" 
	xmlns:prism="http://www.codeplex.com/CompositeWPF"
	xmlns:names="clr-namespace:${ProjectName}.Base.Names;assembly=${ProjectName}.Base"
	Width="640"
	Height="480"
	ResizeMode="CanResizeWithGrip"
	Title="${ProjectName}"
	Name="${ProjectName}Shell">
	<Grid>
		<Grid.ColumnDefinitions>
			<ColumnDefinition Width="200" />
			<ColumnDefinition Width="*" />
		</Grid.ColumnDefinitions>
		<Grid.RowDefinitions>
			<RowDefinition Height="22" />
			<RowDefinition Height="*" />
			<RowDefinition Height="22" />
		</Grid.RowDefinitions>
		<Border Grid.ColumnSpan="2">
			<ItemsControl Name="MenuRegion" 
				prism:RegionManager.RegionName="{x:Static names:RegionNames.MenuRegion}"
				VerticalAlignment="Top" Grid.ColumnSpan="2" Height="25" HorizontalAlignment="Left"
				Background="Transparent" Margin="0,2,0,0"/>
		</Border>
		<Grid Margin="2,2,0,2" Grid.Row="1">
			<Border Background="DarkSeaGreen">
				<ScrollViewer VerticalScrollBarVisibility="Auto" Margin="0,0,3,0">
					<ItemsControl Name="NavigationRegion" 
						prism:RegionManager.RegionName="{x:Static names:RegionNames.NavigationRegion}" 
						Margin="4"/>
				</ScrollViewer>
			</Border>
		</Grid>
		<GridSplitter Margin="0,2" Grid.Column="0" Grid.Row="1" Width="3"/>
		<Grid Margin="0,2,2,2" Grid.Row="1" Grid.Column="1">
			<Border Background="SkyBlue">
				<ContentControl Name="MainRegion" 
					prism:RegionManager.RegionName="{x:Static names:RegionNames.MainRegion}" 
					Margin="4"/>
			</Border>
			<TextBlock Padding="10" Text="Hello, my name is ${ProjectName}. I'm alive!"
				FontSize="18" Foreground="#FF10BA43" />
		</Grid>
		<Border Grid.Row="2" Grid.ColumnSpan="2">
			<ItemsControl Name="StatusbarRegion" 
				prism:RegionManager.RegionName="{x:Static names:RegionNames.StatusbarRegion}"
				Background="Transparent" />
		</Border>
	</Grid>
</Window>]]>
				</File>
				<File name="Shell.xaml.cs" SubType="Code" DependentUpon="Shell.xaml">
<![CDATA[using System;
using System.Collections.Generic;
using System.Text;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;

namespace ${StandardNamespace}
{
	/// <summary>
	/// Interaction logic for Shell.xaml
	/// </summary>
	public partial class Shell : Window
	{

		public Shell()
		{
			InitializeComponent();
		}
		
	}
}]]>
				</File>
				<File name="Bootstrapper.cs">
<![CDATA[using Microsoft.Practices.Prism.Logging;
using Microsoft.Practices.Prism.Modularity;
using Microsoft.Practices.Prism.Regions;
using Microsoft.Practices.Prism.UnityExtensions;
using Microsoft.Practices.Unity;
using Microsoft.Practices.Unity.Configuration;
using System;
using System.Configuration;
using System.Globalization;
using System.IO;
using System.Windows;
using System.Windows.Markup;
using ${ProjectName}.Base;

namespace ${StandardNamespace}
{

	public class Bootstrapper : UnityBootstrapper
	{

		/// <summary>
		/// Provides an NLog-Loggers to config using NLog.config file.
		/// </summary>
		/// <returns>The NLogLogger.</returns>
		protected override ILoggerFacade CreateLogger()
		{
			ILoggerFacade logger = new NLogLogger();
			logger.Log("${StandardNamespace} Logger was created.",
				Category.Info, Priority.None);
			return logger;
		}


		/// <summary>
		/// Initialization of the Module Catalog from the "Module" directory
		/// </summary>
		/// <returns>The Module Catalog.</returns>
		protected override IModuleCatalog CreateModuleCatalog()
		{
			if (!Directory.Exists(@".\Modules"))
			{
				Directory.CreateDirectory(@".\Modules");
			}
			var moduleCatalog = new DirectoryModuleCatalog();
			moduleCatalog.ModulePath = @".\Modules";
			Logger.Log("${StandardNamespace} Module Catalog was created",
				Category.Info, Priority.None);
			return moduleCatalog;
		}


		/// <summary>
		/// Configuration of the Unity Container using unity.config file.
		/// </summary>
		protected override void ConfigureContainer()
		{
			base.ConfigureContainer();
			var configMap = new ExeConfigurationFileMap()
				{
					ExeConfigFilename = @".\unity.config"
				};
			var config = ConfigurationManager.OpenMappedExeConfiguration(configMap,
				ConfigurationUserLevel.None);
			var section = (UnityConfigurationSection)config.GetSection("unity");
			this.Container.LoadConfiguration(section);
			Logger.Log("${StandardNamespace} Unity-Container was created.",
				Category.Info, Priority.None);
		}


		/// <summary>
		/// Initialization of the RegionAdapterMappings.
		/// </summary>
		/// <returns>The Region Adapter Mappings.</returns>
		protected override RegionAdapterMappings ConfigureRegionAdapterMappings()
		{
			var mappings = base.ConfigureRegionAdapterMappings();
			if (mappings == null) return null;

			//e.g.: add custom mappings ...
			//var ribbonRegionAdapter = ServiceLocator.Current.GetInstance<RibbonRegionAdapter>();
			//mappings.RegisterMapping(typeof(Ribbon), ribbonRegionAdapter);

			Logger.Log("${StandardNamespace} RegionAdapterMappings were created.",
				Category.Info, Priority.None);
			return mappings;
		}


		/// <summary>
		/// Creation of the Shell.
		/// </summary>
		/// <returns>The Shell (Main Window).</returns>
		protected override System.Windows.DependencyObject CreateShell()
		{
			Logger.Log("${StandardNamespace} Shell was provided.",
				Category.Info, Priority.None);
			return Container.Resolve<Shell>();
		}


		/// <summary>
		/// Shell Initialization.
		/// </summary>
		protected override void InitializeShell()
		{
			// Internationalization-Fix for correct StringFormat localization 
			// (e.g. DateTime formatting):
			FrameworkElement.LanguageProperty.OverrideMetadata(
				typeof(FrameworkElement), 
				new FrameworkPropertyMetadata(
					XmlLanguage.GetLanguage(
				CultureInfo.CurrentCulture.IetfLanguageTag)));

			base.InitializeShell();
			App.Current.MainWindow = (Window)Shell;
			App.Current.MainWindow.Show();
			Logger.Log("${StandardNamespace} Shell was successfully initialized and displayed.",
				Category.Info, Priority.None);
		}


		/// <summary>
		/// Module Initialization.
		/// </summary>
		protected override void InitializeModules()
		{
			base.InitializeModules();
			Logger.Log("${StandardNamespace} was successfully initialized.",
				Category.Info, Priority.None);
		}

	}

}]]>
				</File>
				<File name="Themes\Generic.xaml" buildAction="Page" customTool="MSBuild:Compile" language="XML">
<![CDATA[<ResourceDictionary
	xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
	xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
</ResourceDictionary>]]>
				</File>
				
				<File name="Properties\WPFAssemblyInfo.cs" src="WPFAssemblyInfo.cs" />
				<File name="Properties\AssemblyInfo.cs" src="DefaultAssemblyInfo.cs" />
			</Files>

		</Project>

	</Solution>

</Template>